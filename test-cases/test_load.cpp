#include "test_main.hpp"


TEST_F(LoadTest, LD_register_immediate_test){
    constexpr std::array<uint8_t, 1> expected_reg_value = {0x28};

    constexpr std::array<uint8_t, 2> memoryA = {0x3E, 0x28};
    constexpr std::array<uint8_t, 2> memoryB = {0x06, 0x28};
    constexpr std::array<uint8_t, 2> memoryC = {0x0E, 0x28};
    constexpr std::array<uint8_t, 2> memoryD = {0x16, 0x28};
    constexpr std::array<uint8_t, 2> memoryE = {0x1E, 0x28};
    constexpr std::array<uint8_t, 2> memoryH = {0x26, 0x28};
    constexpr std::array<uint8_t, 2> memoryL = {0x2E, 0x28};

    TestRegister(memoryA, bus.cpu_.get_accumulator_address(), expected_reg_value);
    TestRegister(memoryB, bus.cpu_.get_registerB_address(), expected_reg_value);
    TestRegister(memoryC, bus.cpu_.get_registerC_address(), expected_reg_value);
    TestRegister(memoryD, bus.cpu_.get_registerD_address(), expected_reg_value);
    TestRegister(memoryE, bus.cpu_.get_registerE_address(), expected_reg_value);
    TestRegister(memoryH, bus.cpu_.get_registerH_address(), expected_reg_value);
    TestRegister(memoryL, bus.cpu_.get_registerL_address(), expected_reg_value);
}


TEST_F(LoadTest, LD_register_register_test){
    constexpr std::array<uint8_t, 14> expected_reg_values_A =
            {0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x07};
    constexpr std::array<uint8_t, 14> expected_reg_values_B =
            {0x00, 0x02, 0x02, 0x02, 0x02, 0x02, 0x02, 0x01, 0x01, 0x03, 0x04, 0x05, 0x06, 0x07};
    constexpr std::array<uint8_t, 14> expected_reg_values_C =
            {0x00, 0x00, 0x03, 0x03, 0x03, 0x03, 0x03, 0x01, 0x02, 0x02, 0x04, 0x05, 0x06, 0x07};
    constexpr std::array<uint8_t, 14> expected_reg_values_D =
            {0x00, 0x00, 0x00, 0x04, 0x04, 0x04, 0x04, 0x01, 0x02, 0x03, 0x03, 0x05, 0x06, 0x07};
    constexpr std::array<uint8_t, 14> expected_reg_values_E =
            {0x00, 0x00, 0x00, 0x00, 0x05, 0x05, 0x05, 0x01, 0x02, 0x03, 0x04, 0x04, 0x06, 0x07};
    constexpr std::array<uint8_t, 14> expected_reg_values_H =
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x06, 0x06, 0x01, 0x02, 0x03, 0x04, 0x05, 0x05, 0x07};
    constexpr std::array<uint8_t, 14> expected_reg_values_L =
            {0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x07, 0x01, 0x02, 0x03, 0x04, 0x05, 0x06, 0x06};


    constexpr std::array<uint8_t, 21> memoryA = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x7F, 0x78,
            0x79, 0x7A, 0x7B, 0x7C, 0x7D
    };

    constexpr std::array<uint8_t, 21> memoryB = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x47, 0x40,
            0x41, 0x42, 0x43, 0x44, 0x45
    };

    constexpr std::array<uint8_t, 21> memoryC = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x4F, 0x48,
            0x49, 0x4A, 0x4B, 0x4C, 0x4D
    };

    constexpr std::array<uint8_t, 21> memoryD = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x57, 0x50,
            0x51, 0x52, 0x53, 0x54, 0x55
    };

    constexpr std::array<uint8_t, 21> memoryE = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x5F, 0x58,
            0x59, 0x5A, 0x5B, 0x5C, 0x5D
    };

    constexpr std::array<uint8_t, 21> memoryH = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x67, 0x60,
            0x61, 0x62, 0x63, 0x64, 0x65
    };

    constexpr std::array<uint8_t, 21> memoryL = {
            0x3E, 0x01, 0x06, 0x02, 0x0E, 0x03, 0x16, 0x04,
            0x1E, 0x05, 0x26, 0x06, 0x2E, 0x07, 0x6F, 0x68,
            0x69, 0x6A, 0x6B, 0x6C, 0x6D
    };

    TestRegister(memoryA, bus.cpu_.get_accumulator_address(), expected_reg_values_A);
    TestRegister(memoryB, bus.cpu_.get_registerB_address(), expected_reg_values_B);
    TestRegister(memoryC, bus.cpu_.get_registerC_address(), expected_reg_values_C);
    TestRegister(memoryD, bus.cpu_.get_registerD_address(), expected_reg_values_D);
    TestRegister(memoryE, bus.cpu_.get_registerE_address(), expected_reg_values_E);
    TestRegister(memoryH, bus.cpu_.get_registerH_address(), expected_reg_values_H);
    TestRegister(memoryL, bus.cpu_.get_registerL_address(), expected_reg_values_L);
}


TEST_F(LoadTest, LD_register_register_indirect_test){
    constexpr std::array<uint8_t, 37> expected_reg_values = {
            0x01, 0x01, 0x01, 0x01, 0x00, 0x01, 0x02, 0x02,
            0x00, 0x00, 0x02, 0x03, 0x03, 0x00, 0x00, 0x03,
            0x04, 0x04, 0x00, 0x00, 0x04, 0x05, 0x05, 0x00,
            0x00, 0x05, 0x06, 0x06, 0x00, 0x00, 0x06, 0x06,
            0x07, 0x07, 0x00, 0x00, 0x07
    };

    constexpr std::array<uint8_t, 68> memory = {
            0x3E, 0x01, 0x32, 0x50, 0x00, 0x26, 0x00, 0x2E,
            0x50, 0x3E, 0x00, 0x7E, 0x3E, 0x02, 0x32, 0x50,
            0x00, 0x3E, 0x00, 0x46, 0x78, 0x3E, 0x03, 0x32,
            0x50, 0x00, 0x3E, 0x00, 0x4E, 0x79, 0x3E, 0x04,
            0x32, 0x50, 0x00, 0x3E, 0x00, 0x56, 0x7A, 0x3E,
            0x05, 0x32, 0x50, 0x00, 0x3E, 0x00, 0x5E, 0x7B,
            0x3E, 0x06, 0x32, 0x50, 0x00, 0x3E, 0x00, 0x66,
            0x7C, 0x26, 0x00, 0x3E, 0x07, 0x32, 0x50, 0x00,
            0x3E, 0x00, 0x6E, 0x7D
    };

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_register_register_indirect_BC_test){
    constexpr std::array<uint8_t, 6> expected_reg_values = {0x01, 0x01, 0x00, 0x00, 0x00, 0x01};
    constexpr std::array<uint8_t, 12> memory = {
            0x3E, 0x01, 0x32, 0x50, 0x00, 0x3E, 0x00, 0x06, 0x00, 0x0E, 0x50, 0x0A};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_register_register_indirect_DE_test){
    constexpr std::array<uint8_t, 6> expected_reg_values = {0x01, 0x01, 0x00, 0x00, 0x00, 0x01};
    constexpr std::array<uint8_t, 12> memory = {
            0x3E, 0x01, 0x32, 0x50, 0x00, 0x3E, 0x00, 0x16, 0x00, 0x1E, 0x50, 0x1A};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_register_implied_I_test){
    constexpr std::array<uint8_t, 4> expected_reg_values = {0xA8, 0xA8, 0x00, 0xA8};
    constexpr std::array<uint8_t, 4> expected_flag_values = {0x00, 0x00, 0x00, 0xA8};

    constexpr std::array<uint8_t, 8> memory = {0x3E, 0xA8, 0xED, 0x47, 0x3E, 0x00, 0xED, 0x57};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
    TestFlag(memory, bus.cpu_.get_flag_register_address(), expected_flag_values);
}


TEST_F(LoadTest, LD_register_implied_R_test){
    constexpr std::array<uint8_t, 4> expected_regR_values = {0x01, 0xA8, 0xA9, 0xAB};
    constexpr std::array<uint8_t, 4> expected_regA_values = {0xA8, 0xA8, 0x00, 0xAB};
    constexpr std::array<uint8_t, 4> expected_flag_values = {0x00, 0x00, 0x00, 0xA8};

    constexpr std::array<uint8_t, 8> memory = {0x3E, 0xA8, 0xED, 0x4F, 0x3E, 0x00, 0xED, 0x5F};

    TestRegister(memory, bus.cpu_.get_memory_refresh_address(), expected_regR_values);
    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_regA_values);
    TestFlag(memory, bus.cpu_.get_flag_register_address(), expected_flag_values);
}


TEST_F(LoadTest, LD_register_indexed_ix_test){
    constexpr std::array<uint8_t, 5> expected_reg_values = {0xFF, 0xFF, 0x00, 0x00, 0xFF};

    constexpr std::array<uint8_t, 14> memory =
            {0x3E, 0xFF, 0x32, 0x50, 0x00, 0x3E, 0x00, 0xDD, 0x21, 0x40, 0x00, 0xDD, 0x7E, 0x10};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_register_indexed_iy_test){
    constexpr std::array<uint8_t, 5> expected_reg_values = {0xFF, 0xFF, 0x00, 0x00, 0xFF};

    constexpr std::array<uint8_t, 14> memory =
            {0x3E, 0xFF, 0x32, 0x50, 0x00, 0x3E, 0x00, 0xFD, 0x21, 0x40, 0x00, 0xFD, 0x7E, 0x10};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_register_extended_test){
    constexpr std::array<uint8_t, 1> expected_reg_value = {0xFF};
    constexpr std::array<uint8_t, 4> memory = {0x3A, 0x03, 0x00, 0xFF};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_value);
}


TEST_F(LoadTest, LD_register_indirect_immediate_test){
    constexpr std::array<uint8_t, 4> expected_reg_value = {0x00, 0x00, 0x00, 0xFF};
    constexpr std::array<uint8_t, 9> memory = {0x26, 0x00, 0x2E, 0x50, 0x36, 0xFF, 0x3A, 0x50, 0x00};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_value);
}


//TEST_F(LoadTest, LD_register_indirect_register_test){}


//TEST_F(LoadTest, LD_register_indirect_register_BC_test){}


//TEST_F(LoadTest, LD_register_indirect_register_DE_test){}


//TEST_F(LoadTest, LD_indexed_ix_immediate_test){}


//TEST_F(LoadTest, LD_indexed_iy_immediate_test){}


//TEST_F(LoadTest, LD_indexed_ix_register_test){}


//TEST_F(LoadTest, LD_indexed_iy_register_test){}


TEST_F(LoadTest, LD_extended_register_test){
    constexpr std::array<uint8_t, 4> expected_reg_values = {0xFF, 0xFF, 0x00, 0xFF};
    constexpr std::array<uint8_t, 10> memory = {0x3E, 0xFF, 0x32, 0x0A, 0x00, 0x3E, 0x00, 0x3A, 0x0A, 0x00};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_implied_register_I_test){
    constexpr std::array<uint8_t, 2> expected_reg_values = {0x00, 0x19};
    constexpr std::array<uint8_t, 4> memory = {0x3E, 0x19, 0xED, 0x47};

    TestRegister(memory, bus.cpu_.get_interrupt_vector_address(), expected_reg_values);
}


TEST_F(LoadTest, LD_implied_register_R_test){
    constexpr std::array<uint8_t, 2> expected_reg_values = {0x01, 0x19};
    constexpr std::array<uint8_t, 4> memory = {0x3E, 0x19, 0xED, 0x4F};

    TestRegister(memory, bus.cpu_.get_memory_refresh_address(), expected_reg_values);
}


// 16 Bit Tests
TEST_F(LoadTest, LD_register_extended_ix_test){
    constexpr std::array<uint16_t, 1> expected_reg_value = {0x0040};
    constexpr std::array<uint8_t, 4> memory = {0xDD, 0x21, 0x40, 0x00};

    TestRegister2(memory, bus.cpu_.get_regIX_address(), expected_reg_value);
}