#include "test_main.hpp"

TEST_F(JumpTest, JP_immediate_test)
{
    constexpr std::array<uint8_t, 2> expected_register_values = {0x00, 0xFF};

    constexpr std::array<uint8_t, 7> memory = {0xC3, 0x05, 0x00, 0x3E, 0x28, 0x3E, 0xFF};

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_register_values);
}


TEST_F(JumpTest, JP_cc_immediate_test)
{
    constexpr std::array<uint8_t, 8> expected_register_values_A = {0x00, 0x01, 0x01, 0x02, 0x02, 0x03, 0x03, 0x04};

    constexpr std::array<uint8_t, 32> memory_A = {
            0xC2, 0x05, 0x00, 0x3E, 0x28, 0x3E, 0x01, 0xD2,
            0x0C, 0x00, 0x3E, 0x28, 0x3E, 0x02, 0xE2, 0x13,
            0x00, 0x3E, 0x28, 0x3E, 0x03, 0xF2, 0x1A, 0x00,
            0x3E, 0x28, 0x3E, 0x04
    };

    constexpr std::array<uint8_t, 13> expected_register_values_B = { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02, 0x02, 0x03, 0x00, 0x00, 0x00, 0x04 };

    constexpr std::array<uint8_t, 35> memory_B = {
            0x37, 0xDA, 0x06, 0x00, 0x3E, 0x28, 0x3E, 0x01,
            0x3E, 0x00, 0xB7, 0xCA, 0x10, 0x00, 0x3E, 0x28,
            0x3E, 0x02, 0xEA, 0x17, 0x00, 0x3E, 0x28, 0x3E,
            0x03, 0x3E, 0x00, 0xBF, 0xFA, 0x21, 0x00, 0x3E,
            0x28, 0x3E, 0x04
    };

    TestRegister(memory_A, bus.cpu_.get_accumulator_address(), expected_register_values_A);
    TestRegister(memory_B, bus.cpu_.get_accumulator_address(), expected_register_values_B);
}


TEST_F(JumpTest, JR_relative_test)
{
    constexpr std::array<uint8_t, 3> expected_register_values = { 0x00, 0x00, 0x01 };

    constexpr std::array<uint8_t, 8> memory = { 0x3E, 0x00, 0x18, 0x02, 0x3E, 0x28, 0x3E, 0x01 };

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_register_values);
}


TEST_F(JumpTest, JR_cc_relative_test)
{
    constexpr std::array<uint8_t, 5> expected_register_values_A = { 0x00, 0x00, 0x01, 0x01, 0x02 };

    constexpr std::array<uint8_t, 14> memory_A = {
            0x3E, 0x00, 0x20, 0x02, 0x3E, 0x28, 0x3E, 0x01,
            0x30, 0x02, 0x3E, 0x28, 0x3E, 0x02
    };

    constexpr std::array<uint8_t, 7> expected_register_values_B = { 0x00, 0x00, 0x01, 0x00, 0x00, 0x00, 0x02 };

    constexpr std::array<uint8_t, 16> memory_B = {
            0x37, 0x38, 0x02, 0x3E, 0x28, 0x3E, 0x01, 0x3E,
            0x00, 0xB7, 0x28, 0x02, 0x3E, 0x28, 0x3E, 0x02
    };

    TestRegister(memory_A, bus.cpu_.get_accumulator_address(), expected_register_values_A);
    TestRegister(memory_B, bus.cpu_.get_accumulator_address(), expected_register_values_B);
}



TEST_F(JumpTest, JP_implict_test)
{
    constexpr std::array<uint8_t, 6> expected_register_values = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x01 };

    constexpr std::array<uint8_t, 13> memory = {
            0x3F, 0xED, 0x5F, 0x3E, 0x00, 0x21, 0x0B, 0x00,
            0xE9, 0x3E, 0x28, 0x3E, 0x01
    };

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_register_values);
}


TEST_F(JumpTest, JP_implict_ix_test)
{
    constexpr std::array<uint8_t, 6> expected_register_values = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x01 };

    constexpr std::array<uint8_t, 15> memory = {
            0x3F, 0xED, 0x5F, 0x3E, 0x00, 0xDD, 0x21, 0x0D,
            0x00, 0xDD, 0xE9, 0x3E, 0x28, 0x3E, 0x01
    };

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_register_values);
}


TEST_F(JumpTest, JP_implict_iy_test)
{
    constexpr std::array<uint8_t, 6> expected_register_values = { 0x00, 0x03, 0x00, 0x00, 0x00, 0x01 };

    constexpr std::array<uint8_t, 15> memory = {
            0x3F, 0xED, 0x5F, 0x3E, 0x00, 0xFD, 0x21, 0x0D,
            0x00, 0xFD, 0xE9, 0x3E, 0x28, 0x3E, 0x01
    };

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_register_values);
}


TEST_F(JumpTest, DJNZ_immediate_test)
{
    constexpr std::array<uint8_t, 5> expected_register_values = { 0x00, 0x00, 0x01, 0x01, 0x02 };

    constexpr std::array<uint8_t, 12> memory = {
            0x06, 0x01, 0x10, 0x02, 0x3E, 0x01, 0x10, 0x02,
            0x3E, 0x28, 0x3E, 0x02
    };

    TestRegister(memory, bus.cpu_.get_accumulator_address(), expected_register_values);
}